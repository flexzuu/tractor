// Code generated by 'goexports github.com/manifold/tractor/pkg/manifold'. DO NOT EDIT.

// +build go1.13,!go1.14

package repl

import (
	"github.com/manifold/tractor/pkg/manifold"
	"reflect"
)

func init() {
	Symbols["github.com/manifold/tractor/pkg/manifold"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ExpandPath": reflect.ValueOf(manifold.ExpandPath),
		"Walk":       reflect.ValueOf(manifold.Walk),

		// type definitions
		"AttributeSet":      reflect.ValueOf((*manifold.AttributeSet)(nil)),
		"Component":         reflect.ValueOf((*manifold.Component)(nil)),
		"ComponentCaller":   reflect.ValueOf((*manifold.ComponentCaller)(nil)),
		"ComponentGetter":   reflect.ValueOf((*manifold.ComponentGetter)(nil)),
		"ComponentList":     reflect.ValueOf((*manifold.ComponentList)(nil)),
		"ComponentSetter":   reflect.ValueOf((*manifold.ComponentSetter)(nil)),
		"ComponentSnapshot": reflect.ValueOf((*manifold.ComponentSnapshot)(nil)),
		"Object":            reflect.ValueOf((*manifold.Object)(nil)),
		"ObjectChange":      reflect.ValueOf((*manifold.ObjectChange)(nil)),
		"ObjectPrefab":      reflect.ValueOf((*manifold.ObjectPrefab)(nil)),
		"ObjectSnapshot":    reflect.ValueOf((*manifold.ObjectSnapshot)(nil)),
		"SnapshotRef":       reflect.ValueOf((*manifold.SnapshotRef)(nil)),
		"TreeNode":          reflect.ValueOf((*manifold.TreeNode)(nil)),

		// interface wrapper definitions
		"_AttributeSet":    reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_AttributeSet)(nil)),
		"_Component":       reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_Component)(nil)),
		"_ComponentCaller": reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_ComponentCaller)(nil)),
		"_ComponentGetter": reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_ComponentGetter)(nil)),
		"_ComponentList":   reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_ComponentList)(nil)),
		"_ComponentSetter": reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_ComponentSetter)(nil)),
		"_Object":          reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_Object)(nil)),
		"_TreeNode":        reflect.ValueOf((*_github_com_manifold_tractor_pkg_manifold_TreeNode)(nil)),
	}
}

// _github_com_manifold_tractor_pkg_manifold_AttributeSet is an interface wrapper for AttributeSet type
type _github_com_manifold_tractor_pkg_manifold_AttributeSet struct {
	WGetAttribute   func(attr string) interface{}
	WHasAttribute   func(attr string) bool
	WSetAttribute   func(attr string, value interface{})
	WUnsetAttribute func(attr string)
}

func (W _github_com_manifold_tractor_pkg_manifold_AttributeSet) GetAttribute(attr string) interface{} {
	return W.WGetAttribute(attr)
}
func (W _github_com_manifold_tractor_pkg_manifold_AttributeSet) HasAttribute(attr string) bool {
	return W.WHasAttribute(attr)
}
func (W _github_com_manifold_tractor_pkg_manifold_AttributeSet) SetAttribute(attr string, value interface{}) {
	W.WSetAttribute(attr, value)
}
func (W _github_com_manifold_tractor_pkg_manifold_AttributeSet) UnsetAttribute(attr string) {
	W.WUnsetAttribute(attr)
}

// _github_com_manifold_tractor_pkg_manifold_Component is an interface wrapper for Component type
type _github_com_manifold_tractor_pkg_manifold_Component struct {
	WCallMethod     func(path string, args []interface{}, reply interface{}) error
	WContainer      func() manifold.Object
	WEnabled        func() bool
	WFieldType      func(path string) reflect.Type
	WFields         func()
	WGetField       func(path string) (interface{}, reflect.Type, error)
	WID             func() string
	WIndex          func() int
	WMethods        func()
	WName           func() string
	WPointer        func() interface{}
	WRelatedPrefabs func()
	WReload         func() error
	WSetContainer   func(obj manifold.Object)
	WSetEnabled     func(enable bool)
	WSetField       func(path string, value interface{}) error
	WSetIndex       func(idx int)
	WSnapshot       func() manifold.ComponentSnapshot
	WType           func() reflect.Type
}

func (W _github_com_manifold_tractor_pkg_manifold_Component) CallMethod(path string, args []interface{}, reply interface{}) error {
	return W.WCallMethod(path, args, reply)
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) Container() manifold.Object {
	return W.WContainer()
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) Enabled() bool { return W.WEnabled() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) FieldType(path string) reflect.Type {
	return W.WFieldType(path)
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) Fields() { W.WFields() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) GetField(path string) (interface{}, reflect.Type, error) {
	return W.WGetField(path)
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) ID() string   { return W.WID() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) Index() int   { return W.WIndex() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) Methods()     { W.WMethods() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) Name() string { return W.WName() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) Pointer() interface{} {
	return W.WPointer()
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) RelatedPrefabs() { W.WRelatedPrefabs() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) Reload() error   { return W.WReload() }
func (W _github_com_manifold_tractor_pkg_manifold_Component) SetContainer(obj manifold.Object) {
	W.WSetContainer(obj)
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) SetEnabled(enable bool) {
	W.WSetEnabled(enable)
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) SetField(path string, value interface{}) error {
	return W.WSetField(path, value)
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) SetIndex(idx int) { W.WSetIndex(idx) }
func (W _github_com_manifold_tractor_pkg_manifold_Component) Snapshot() manifold.ComponentSnapshot {
	return W.WSnapshot()
}
func (W _github_com_manifold_tractor_pkg_manifold_Component) Type() reflect.Type { return W.WType() }

// _github_com_manifold_tractor_pkg_manifold_ComponentCaller is an interface wrapper for ComponentCaller type
type _github_com_manifold_tractor_pkg_manifold_ComponentCaller struct {
	WCallMethod func(path string, args []interface{}, reply interface{}) error
}

func (W _github_com_manifold_tractor_pkg_manifold_ComponentCaller) CallMethod(path string, args []interface{}, reply interface{}) error {
	return W.WCallMethod(path, args, reply)
}

// _github_com_manifold_tractor_pkg_manifold_ComponentGetter is an interface wrapper for ComponentGetter type
type _github_com_manifold_tractor_pkg_manifold_ComponentGetter struct {
	WGetField func(path string) (interface{}, reflect.Type, error)
}

func (W _github_com_manifold_tractor_pkg_manifold_ComponentGetter) GetField(path string) (interface{}, reflect.Type, error) {
	return W.WGetField(path)
}

// _github_com_manifold_tractor_pkg_manifold_ComponentList is an interface wrapper for ComponentList type
type _github_com_manifold_tractor_pkg_manifold_ComponentList struct {
	WAppendComponent   func(com manifold.Component)
	WComponent         func(name string) manifold.Component
	WComponents        func() []manifold.Component
	WHasComponent      func(com manifold.Component) bool
	WInsertComponentAt func(idx int, com manifold.Component)
	WRemoveComponent   func(com manifold.Component)
	WRemoveComponentAt func(idx int) manifold.Component
}

func (W _github_com_manifold_tractor_pkg_manifold_ComponentList) AppendComponent(com manifold.Component) {
	W.WAppendComponent(com)
}
func (W _github_com_manifold_tractor_pkg_manifold_ComponentList) Component(name string) manifold.Component {
	return W.WComponent(name)
}
func (W _github_com_manifold_tractor_pkg_manifold_ComponentList) Components() []manifold.Component {
	return W.WComponents()
}
func (W _github_com_manifold_tractor_pkg_manifold_ComponentList) HasComponent(com manifold.Component) bool {
	return W.WHasComponent(com)
}
func (W _github_com_manifold_tractor_pkg_manifold_ComponentList) InsertComponentAt(idx int, com manifold.Component) {
	W.WInsertComponentAt(idx, com)
}
func (W _github_com_manifold_tractor_pkg_manifold_ComponentList) RemoveComponent(com manifold.Component) {
	W.WRemoveComponent(com)
}
func (W _github_com_manifold_tractor_pkg_manifold_ComponentList) RemoveComponentAt(idx int) manifold.Component {
	return W.WRemoveComponentAt(idx)
}

// _github_com_manifold_tractor_pkg_manifold_ComponentSetter is an interface wrapper for ComponentSetter type
type _github_com_manifold_tractor_pkg_manifold_ComponentSetter struct {
	WSetField func(path string, value interface{}) error
}

func (W _github_com_manifold_tractor_pkg_manifold_ComponentSetter) SetField(path string, value interface{}) error {
	return W.WSetField(path, value)
}

// _github_com_manifold_tractor_pkg_manifold_Object is an interface wrapper for Object type
type _github_com_manifold_tractor_pkg_manifold_Object struct {
	WAppendChild       func(child manifold.Object)
	WAppendComponent   func(com manifold.Component)
	WCallMethod        func(path string, args []interface{}, reply interface{}) error
	WChildAt           func(idx int) manifold.Object
	WChildren          func() []manifold.Object
	WComponent         func(name string) manifold.Component
	WComponents        func() []manifold.Component
	WFindChild         func(subpath string) manifold.Object
	WFindID            func(id string) manifold.Object
	WFindPointer       func(ptr interface{}) manifold.Object
	WGetAttribute      func(attr string) interface{}
	WGetField          func(path string) (interface{}, reflect.Type, error)
	WHasAttribute      func(attr string) bool
	WHasComponent      func(com manifold.Component) bool
	WID                func() string
	WInsertChildAt     func(idx int, node manifold.Object)
	WInsertComponentAt func(idx int, com manifold.Component)
	WMain              func() manifold.Component
	WName              func() string
	WNextSibling       func() manifold.Object
	WParent            func() manifold.Object
	WPath              func() string
	WPreviousSibling   func() manifold.Object
	WRemoveChild       func(node manifold.Object)
	WRemoveChildAt     func(idx int) manifold.Object
	WRemoveComponent   func(com manifold.Component)
	WRemoveComponentAt func(idx int) manifold.Component
	WRemoveID          func(id string) manifold.Object
	WRoot              func() manifold.Object
	WSetAttribute      func(attr string, value interface{})
	WSetField          func(path string, value interface{}) error
	WSetMain           func(com manifold.Component)
	WSetName           func(name string)
	WSetParent         func(node manifold.Object)
	WSetSiblingIndex   func(idx int) error
	WSiblingIndex      func() int
	WSnapshot          func() manifold.ObjectSnapshot
	WSubpath           func(names []string) string
	WUnsetAttribute    func(attr string)
	WUpdateRegistry    func() error
	WValueTo           func(rv reflect.Value)
}

func (W _github_com_manifold_tractor_pkg_manifold_Object) AppendChild(child manifold.Object) {
	W.WAppendChild(child)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) AppendComponent(com manifold.Component) {
	W.WAppendComponent(com)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) CallMethod(path string, args []interface{}, reply interface{}) error {
	return W.WCallMethod(path, args, reply)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) ChildAt(idx int) manifold.Object {
	return W.WChildAt(idx)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Children() []manifold.Object {
	return W.WChildren()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Component(name string) manifold.Component {
	return W.WComponent(name)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Components() []manifold.Component {
	return W.WComponents()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) FindChild(subpath string) manifold.Object {
	return W.WFindChild(subpath)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) FindID(id string) manifold.Object {
	return W.WFindID(id)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) FindPointer(ptr interface{}) manifold.Object {
	return W.WFindPointer(ptr)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) GetAttribute(attr string) interface{} {
	return W.WGetAttribute(attr)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) GetField(path string) (interface{}, reflect.Type, error) {
	return W.WGetField(path)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) HasAttribute(attr string) bool {
	return W.WHasAttribute(attr)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) HasComponent(com manifold.Component) bool {
	return W.WHasComponent(com)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) ID() string { return W.WID() }
func (W _github_com_manifold_tractor_pkg_manifold_Object) InsertChildAt(idx int, node manifold.Object) {
	W.WInsertChildAt(idx, node)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) InsertComponentAt(idx int, com manifold.Component) {
	W.WInsertComponentAt(idx, com)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Main() manifold.Component {
	return W.WMain()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Name() string { return W.WName() }
func (W _github_com_manifold_tractor_pkg_manifold_Object) NextSibling() manifold.Object {
	return W.WNextSibling()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Parent() manifold.Object {
	return W.WParent()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Path() string { return W.WPath() }
func (W _github_com_manifold_tractor_pkg_manifold_Object) PreviousSibling() manifold.Object {
	return W.WPreviousSibling()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) RemoveChild(node manifold.Object) {
	W.WRemoveChild(node)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) RemoveChildAt(idx int) manifold.Object {
	return W.WRemoveChildAt(idx)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) RemoveComponent(com manifold.Component) {
	W.WRemoveComponent(com)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) RemoveComponentAt(idx int) manifold.Component {
	return W.WRemoveComponentAt(idx)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) RemoveID(id string) manifold.Object {
	return W.WRemoveID(id)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Root() manifold.Object { return W.WRoot() }
func (W _github_com_manifold_tractor_pkg_manifold_Object) SetAttribute(attr string, value interface{}) {
	W.WSetAttribute(attr, value)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) SetField(path string, value interface{}) error {
	return W.WSetField(path, value)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) SetMain(com manifold.Component) {
	W.WSetMain(com)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) SetName(name string) { W.WSetName(name) }
func (W _github_com_manifold_tractor_pkg_manifold_Object) SetParent(node manifold.Object) {
	W.WSetParent(node)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) SetSiblingIndex(idx int) error {
	return W.WSetSiblingIndex(idx)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) SiblingIndex() int {
	return W.WSiblingIndex()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Snapshot() manifold.ObjectSnapshot {
	return W.WSnapshot()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) Subpath(names []string) string {
	return W.WSubpath(names)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) UnsetAttribute(attr string) {
	W.WUnsetAttribute(attr)
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) UpdateRegistry() error {
	return W.WUpdateRegistry()
}
func (W _github_com_manifold_tractor_pkg_manifold_Object) ValueTo(rv reflect.Value) { W.WValueTo(rv) }

// _github_com_manifold_tractor_pkg_manifold_TreeNode is an interface wrapper for TreeNode type
type _github_com_manifold_tractor_pkg_manifold_TreeNode struct {
	WAppendChild     func(child manifold.Object)
	WChildAt         func(idx int) manifold.Object
	WChildren        func() []manifold.Object
	WInsertChildAt   func(idx int, node manifold.Object)
	WNextSibling     func() manifold.Object
	WParent          func() manifold.Object
	WPreviousSibling func() manifold.Object
	WRemoveChild     func(node manifold.Object)
	WRemoveChildAt   func(idx int) manifold.Object
	WRoot            func() manifold.Object
	WSetParent       func(node manifold.Object)
	WSetSiblingIndex func(idx int) error
	WSiblingIndex    func() int
}

func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) AppendChild(child manifold.Object) {
	W.WAppendChild(child)
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) ChildAt(idx int) manifold.Object {
	return W.WChildAt(idx)
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) Children() []manifold.Object {
	return W.WChildren()
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) InsertChildAt(idx int, node manifold.Object) {
	W.WInsertChildAt(idx, node)
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) NextSibling() manifold.Object {
	return W.WNextSibling()
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) Parent() manifold.Object {
	return W.WParent()
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) PreviousSibling() manifold.Object {
	return W.WPreviousSibling()
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) RemoveChild(node manifold.Object) {
	W.WRemoveChild(node)
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) RemoveChildAt(idx int) manifold.Object {
	return W.WRemoveChildAt(idx)
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) Root() manifold.Object { return W.WRoot() }
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) SetParent(node manifold.Object) {
	W.WSetParent(node)
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) SetSiblingIndex(idx int) error {
	return W.WSetSiblingIndex(idx)
}
func (W _github_com_manifold_tractor_pkg_manifold_TreeNode) SiblingIndex() int {
	return W.WSiblingIndex()
}
